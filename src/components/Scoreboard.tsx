// src/components/Scoreboard.tsx
import { useState } from 'react';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Container from 'react-bootstrap/Container';
import { useAppDispatch, useAppSelector } from '../store/hooks';
import {
  endMatch,
  gameTo, undoGame,
  pointTB, undoPointTB,
} from '../store/matchSlice';
import MatchSummary, { MatchPayload } from './MatchSummary';

export default function Scoreboard() {
  const dispatch = useAppDispatch();
  const {
    teamA, teamB,
    gamesA, gamesB,
    sets,
    tiebreakActive, tbA, tbB,
  } = useAppSelector(s => s.match);

  const [summary, setSummary] = useState<MatchPayload | null>(null);

  // –°–æ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:
  const buildPayloadSets = () => {
    const result = [...sets];
    if (tiebreakActive) {
      result.push({ a: 6, b: 6, tiebreak: true, tbA, tbB });
    } else if (gamesA > 0 || gamesB > 0) {
      result.push({ a: gamesA, b: gamesB });
    }
    return result;
  };

  const handleEndMatch = () => {
    const tg = (window as any).Telegram?.WebApp;

    const payload: MatchPayload = {
      type: 'match_result',
      teamA,
      teamB,
      sets: buildPayloadSets(),
    };

    if (!tg || !tg.sendData) {
      console.warn('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –±–æ—Ç–∞.');
      alert('–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ Telegram, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.');
      return;
    }

    try {
      tg.sendData(JSON.stringify(payload));
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ sendData', e);
      return;
    }

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
    setSummary(payload);

    // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å WebApp:
    // tg.close();
  };

  const startNewMatch = () => {
    setSummary(null);
    dispatch(endMatch());
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å summary ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ –≤–º–µ—Å—Ç–æ —Ç–∞–±–ª–æ
  if (summary) {
    return <MatchSummary payload={summary} onNewMatch={startNewMatch} />;
  }

  const handlePing = () => {
    const tg = (window as any).Telegram?.WebApp;
    if (!tg?.sendData) {
      console.warn('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      alert('–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞');
      return;
    }

    const payload = {
      type: 'ping',
      timestamp: Date.now(),
      message: 'Ping from frontend'
    };

    console.log('Sending ping:', payload);
    tg.sendData(JSON.stringify(payload));
  };

  // --- –Ω–∏–∂–µ —Ç–≤–æ–π –ø—Ä–µ–∂–Ω–∏–π UI —Ç–∞–±–ª–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∏–∑–∞–π–Ω–∞ ---
  return (
    <Card>
      <Card.Body>
        <Card.Title>–¢–µ–∫—É—â–∏–π –º–∞—Ç—á</Card.Title>

        <Container className="mb-3">
          <Row className="g-3 align-items-center">
            <Col>
              <div className="text-muted">{teamA.join(' ‚Äî ')}</div>
            </Col>
            <Col>
              <div className="text-muted">{teamB.join(' ‚Äî ')}</div>
            </Col>
          </Row>
        </Container>

        <Container className="mb-3">
          {sets.map((s, idx) => (
            <Row key={idx}>
              <Col>
                <div className={`fs-3 ${s.a >= s.b ? 'fw-bold' : ''}`}>
                  {s.a}
                  {s.tiebreak && typeof s.tbA === 'number' && typeof s.tbB === 'number'
                    ? ` (TB ${s.tbA})`
                    : ''}
                </div>
              </Col>
              <Col>
                <div className={`fs-3 ${s.b >= s.a ? 'fw-bold' : ''}`}>
                  {s.b}
                  {s.tiebreak && typeof s.tbA === 'number' && typeof s.tbB === 'number'
                    ? ` (TB ${s.tbB})`
                    : ''}
                </div>
              </Col>
            </Row>
          ))}
        </Container>

        {!tiebreakActive ? (
          <>
            <Container className="mb-2">
              <hr />
              <Row className="g-3 text-center">
                <Col>
                  <div className="display-6">{gamesA}</div>
                  <Button className="w-100 mt-2" onClick={() => dispatch(gameTo('A'))}>
                    + –≥–µ–π–º A
                  </Button>
                  <Button
                    className="w-100 mt-2"
                    variant="outline-secondary"
                    onClick={() => dispatch(undoGame('A'))}
                  >
                    - –≥–µ–π–º A
                  </Button>
                </Col>
                <Col>
                  <div className="display-6">{gamesB}</div>
                  <Button className="w-100 mt-2" onClick={() => dispatch(gameTo('B'))}>
                    + –≥–µ–π–º B
                  </Button>
                  <Button
                    className="w-100 mt-2"
                    variant="outline-secondary"
                    onClick={() => dispatch(undoGame('B'))}
                  >
                    - –≥–µ–π–º B
                  </Button>
                </Col>
              </Row>
            </Container>
            <p className="text-muted">
              –°–µ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–Ω–∏—Ü–µ –≤ 2 –≥–µ–π–º–∞.
              –ü—Ä–∏ 6‚Äì6 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–π-–±—Ä–µ–π–∫.
            </p>
          </>
        ) : (
          <>
            <Container className="mb-2">
              <Row className="g-3 text-center">
                <Col>
                  <div className="display-6">TB: {tbA}</div>
                  <Button className="w-100 mt-2" onClick={() => dispatch(pointTB('A'))}>
                    + –û—á–∫–æ TB A
                  </Button>
                  <Button
                    className="w-100 mt-2"
                    variant="outline-secondary"
                    onClick={() => dispatch(undoPointTB('A'))}
                  >
                    - –û—á–∫–æ TB A
                  </Button>
                </Col>
                <Col>
                  <div className="display-6">TB: {tbB}</div>
                  <Button className="w-100 mt-2" onClick={() => dispatch(pointTB('B'))}>
                    + –û—á–∫–æ TB B
                  </Button>
                  <Button
                    className="w-100 mt-2"
                    variant="outline-secondary"
                    onClick={() => dispatch(undoPointTB('B'))}
                  >
                    - –û—á–∫–æ TB B
                  </Button>
                </Col>
              </Row>
            </Container>
            <p className="text-muted">
              –¢–∞–π-–±—Ä–µ–π–∫ –¥–æ 7, —Ä–∞–∑–Ω–∏—Ü–∞ ‚â•2 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7‚Äì5, 8‚Äì6).
              –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–µ—Ç 7‚Äì6.
            </p>
          </>
        )}

        <Container>
          <Row className="g-2">
            <Col xs={12} md="auto">
              <Button variant="outline-danger" onClick={handleEndMatch}>
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á
              </Button>
              <Button variant="outline-secondary" onClick={handlePing}>
                Ping üîî
              </Button>
            </Col>
          </Row>
        </Container>
      </Card.Body>
    </Card>
  );
}
